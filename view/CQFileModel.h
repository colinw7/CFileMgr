#ifndef CQFileModel_H
#define CQFileModel_H

#include <QAbstractItemModel>
#include <QModelIndex>
#include <QVariant>
#include <QStringList>
#include <QSortFilterProxyModel>
#include <QFont>
#include <QPixmap>

#include <cassert>
#include <map>

class CQFileModelSort : public QSortFilterProxyModel {
 public:
  CQFileModelSort(QObject *parent=0) :
   QSortFilterProxyModel(parent) {
  }

  bool lessThan(const QModelIndex &left, const QModelIndex &right) const;
};

//-----------

// Data Structure for column headers and data items.
// Data items are stored using a unique key which is auto generated by the class
class CQFileColumns {
 public:
  CQFileColumns(const QStringList &keys=QStringList()) :
   keys_(keys) {
  }

  int count() const { return keys_.count(); }

  const QString &key(int i) const { return keys_[i]; }

 private:
  QStringList keys_;
};

//---------

class CQFileItem;

//---------

class CQFileVisitor {
 public:
  CQFileVisitor() { }

  virtual ~CQFileVisitor() { }

  virtual void enterDir(CQFileItem *) { }
  virtual void leaveDir(CQFileItem *) { }

  virtual void visitFile(CQFileItem *file) = 0;
};

//---------

class CQFileModel : public QAbstractItemModel {
  Q_OBJECT

 public:
  CQFileModel(QObject *parent=0);
 ~CQFileModel();

  void setColumns(CQFileColumns *columns);

  CQFileItem *root() const { return rootItem_; }

  void addDirFiles(const std::string &dirname, CQFileVisitor *visitor=0);

  CQFileItem *addFile(const std::string &filename);
  CQFileItem *addFile(CQFileItem *parent, const std::string &filename);

  CQFileItem *findItem(const std::string &filename);

  int columnCount(const QModelIndex &parent=QModelIndex()) const;

  QVariant data(const QModelIndex &index, int role) const;

  Qt::ItemFlags flags(const QModelIndex &index) const;

  QVariant headerData(int section, Qt::Orientation orientation, int role=Qt::DisplayRole) const;

  QModelIndex index(int row, int column, const QModelIndex &parent=QModelIndex()) const;

  QModelIndex parent(const QModelIndex &index) const;

  int rowCount(const QModelIndex &parent = QModelIndex()) const;

  QString getData(const QModelIndex &index) const;

 private:
  void addDirFiles(CQFileItem *file, const std::string &dirname, CQFileVisitor *visitor);

 private:
  CQFileColumns *columns_;
  CQFileItem    *rootItem_;
  QFont          headerFont_;
};

#endif
